{"version":3,"sources":["posts/posts.component.ts"],"names":[],"mappings":"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","file":"posts/posts.component.js","sourcesContent":["import {Component, OnInit} from 'angular2/core';\n\nimport {PostService} from './post.service';\nimport {UserService} from '../users/user.service';\nimport {SpinnerComponent} from '../shared/spinner.component';\nimport {PaginationComponent} from '../shared/pagination.component';\n\n@Component({\n  templateUrl: '/templates/posts.component.html',\n  styles: [`\n        .posts li { cursor: default; }\n        .posts li:hover { background: #ecf0f1; }\n        .list-group-item.active,\n        .list-group-item.active:hover,\n        .list-group-item.active:focus {\n            background-color: #ecf0f1;\n            border-color: #ecf0f1;\n            color: #2c3e50;\n        }\n    `],\n  providers: [PostService, UserService],\n  directives: [SpinnerComponent, PaginationComponent]\n})\n\nexport class PostsComponent implements OnInit{\n  posts = [];\n  pagedPosts = [];\n  users = [];\n  postsLoading;\n  commentsLoading;\n  currentPost;\n  pageSize = 10;\n\n  constructor(\n    private _postService: PostService,\n    private _userService: UserService ){\n  }\n\n  //Get the posts from API and set to instance var\n  //After the data is successfully received set isLoading to false\n  ngOnInit(){\n    this.loadUsers();\n    this.loadPosts();\n  }\n\n  private loadUsers(){\n    this._userService.getUsers()\n      .subscribe(users => this.users = users);\n  }\n\n  private loadPosts(filter?){\n    this.postsLoading = true;\n    this._postService.getPosts(filter)\n      .subscribe(\n          posts => {\n            this.posts = posts;\n            this.pagedPosts = this.getPostsInPage(1);\n          },\n          null,\n          ()=> {this.postsLoading=false; });\n  }\n\n  reloadPosts(filter){\n    this.currentPost = null;\n    this.loadPosts(filter);\n  }\n\n  select(post){\n    this.currentPost= post;\n    this.commentsLoading = true;\n    this._postService.getComments(post.id)\n      .subscribe(\n        comments => this.currentPost.comments = comments,\n        null,\n        ()=> {this.commentsLoading=false; });\n  }\n\n  onPageChanged(page){\n    this.pagedPosts = this.getPostsInPage(page);\n  }\n\n  private getPostsInPage(page){\n    var result = [];\n    var startingIndex = (page - 1) * this.pageSize;\n    var endIndex = Math.min(startingIndex + this.pageSize, this.posts.length);\n\n    for(var i = startingIndex; i < endIndex; i++){\n      result.push(this.posts[i]);\n    }\n\n    return result;\n  }\n}\n"],"sourceRoot":"/source/"}